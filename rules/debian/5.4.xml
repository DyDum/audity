<RulesCIS>
    <Rule id="5.4.1.1">
        <Name>Ensure password expiration is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/login.defs</BasePath>
        <FileName>login.defs</FileName>
        <NonCompliantComment>Password expiration is not configured.</NonCompliantComment>
        <CorrectiveComment>Set PASS_MAX_DAYS to 90.</CorrectiveComment>
        <Correction><![CDATA[( grep -qP '^\s*PASS_MAX_DAYS\b' /etc/login.defs && sed -ri 's/^\s*PASS_MAX_DAYS\s+.*/PASS_MAX_DAYS 365/' /etc/login.defs   || echo 'PASS_MAX_DAYS 365' >> /etc/login.defs ) ; awk -F: '($2~/^\$./)&&($5>365||$5<1){system("chage --maxdays 365 "$1)}' /etc/shadow]]></Correction>
        <Verification><![CDATA[awk '/^[[:space:]]*PASS_MAX_DAYS[[:space:]]+[0-9]+/ {v=$2} END {exit !(v>=1 && v<=365)}' /etc/login.defs   && awk -F: '($2~/^\$./){if($5<1||$5>365)exit 1} END{exit 0}' /etc/shadow   && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.1.2">
        <Name>Ensure minimum password days is configured (Manual)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="2" type="Server"/>
            <Profile level="2" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/login.defs</BasePath>
        <FileName>login.defs</FileName>
        <NonCompliantComment>PASS_MIN_DAYS is not set.</NonCompliantComment>
        <CorrectiveComment>Set PASS_MIN_DAYS to 7.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual review required." ]]></Correction>
        <Verification><![CDATA[echo "Manual verification required"]]></Verification>
        <Manual>YES</Manual>
    </Rule>

    <Rule id="5.4.1.3">
        <Name>Ensure password expiration warning days is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/login.defs</BasePath>
        <FileName>login.defs</FileName>
        <NonCompliantComment>PASS_WARN_AGE is not set.</NonCompliantComment>
        <CorrectiveComment>Set PASS_WARN_AGE to 7.</CorrectiveComment>
        <Correction><![CDATA[( grep -qP '^\s*PASS_WARN_AGE\b' /etc/login.defs && sed -ri 's/^\s*PASS_WARN_AGE\s+.*/PASS_WARN_AGE 7/' /etc/login.defs   || echo 'PASS_WARN_AGE 7' >> /etc/login.defs ); awk -F: '($2~/^\$./)&&($6<7){system("chage --warndays 7 "$1)}' /etc/shadow]]></Correction>
        <Verification><![CDATA[awk '/^[[:space:]]*PASS_WARN_AGE[[:space:]]+[0-9]+/ {v=$2} END {exit (v>=7)?0:1}' /etc/login.defs && awk -F: '($2~/^\$./){if($6<7)exit 1} END{exit 0}' /etc/shadow && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.1.4">
        <Name>Ensure strong password hashing algorithm is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/login.defs</BasePath>
        <FileName>login.defs</FileName>
        <NonCompliantComment>ENCRYPT_METHOD is not set.</NonCompliantComment>
        <CorrectiveComment>Set ENCRYPT_METHOD to SHA512.</CorrectiveComment>
        <Correction><![CDATA[grep -Pqs '^\s*ENCRYPT_METHOD\s+(SHA512|YESCRYPT)\b' /etc/login.defs && echo 0 || echo 1]]></Correction>
        <Verification><![CDATA[( grep -qP '^\s*ENCRYPT_METHOD\b' /etc/login.defs && sed -ri 's/^\s*ENCRYPT_METHOD\s+.*/ENCRYPT_METHOD YESCRYPT/' /etc/login.defs || echo 'ENCRYPT_METHOD YESCRYPT' >> /etc/login.defs )]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.1.5">
        <Name>Ensure inactive password lock is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/default/</BasePath>
        <FileName>useradd</FileName>
        <NonCompliantComment>Inactive password lock is not configured.</NonCompliantComment>
        <CorrectiveComment>Set INACTIVE=30 in /etc/default/useradd.</CorrectiveComment>
        <Correction><![CDATA[useradd -D -f 45; awk -F: '($2~/^\$./)&&($7<0||$7>45){system("chage --inactive 45 "$1)}' /etc/shadow]]></Correction>
        <Verification><![CDATA[useradd -D | awk -F= '/INACTIVE=/ {v=$2} END {exit !(v>=0 && v<=45)}' && awk -F: '($2~/^\$./){if($7<0||$7>45)exit 1} END{exit 0}' /etc/shadow && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.1.6">
        <Name>Ensure all users last password change date is in the past (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.1">Configure shadow password suite parameters</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/shadow</BasePath>
        <FileName>shadow</FileName>
        <NonCompliantComment>Some accounts have no last-change date.</NonCompliantComment>
        <CorrectiveComment>Audit /etc/shadow entries.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual review required." ]]></Correction>
        <Verification><![CDATA[echo "Manual verification required"]]></Verification>
        <Manual>YES</Manual>
    </Rule>

    <Rule id="5.4.2.1">
        <Name>Ensure root is the only UID 0 account (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/passwd</BasePath>
        <FileName>passwd</FileName>
        <NonCompliantComment>Extra UID 0 accounts found.</NonCompliantComment>
        <CorrectiveComment>Convert extra UID 0 accounts to non-privileged UIDs.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual review required."]]></Correction>
        <Verification><![CDATA[[ "$(awk -F: '($3 == 0) { print $1 }' /etc/passwd | grep -v '^root$' | wc -l)" -eq 0 ] && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.4.2.2">
        <Name>Ensure root account access is controlled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/passwd</BasePath>
        <FileName>passwd</FileName>
        <NonCompliantComment>Root shell or environment not restricted.</NonCompliantComment>
        <CorrectiveComment>Harden root shell and env.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual review required."]]></Correction>
        <Verification><![CDATA[awk -F: '($4 == 0 && $1 !~ /^(root|sync|shutdown|halt|operator)$/) { c=1 } END { exit c ? 1 : 0 }' /etc/passwd && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.4.2.3">
        <Name>Ensure system accounts do not have a valid login shell (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/</BasePath>
        <FileName>user_account_review</FileName>
        <NonCompliantComment>System accounts have interactive shells.</NonCompliantComment>
        <CorrectiveComment>Assign nologin shells.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual review required."]]></Correction>
        <Verification><![CDATA[awk -F: '($3 == 0 && $1 != "root") { c=1 } END { exit c ? 1 : 0 }' /etc/group && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.4.2.4">
        <Name>Ensure root path integrity (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/</BasePath>
        <FileName>integrity_monitoring.sh</FileName>
        <NonCompliantComment>No integrity monitoring.</NonCompliantComment>
        <CorrectiveComment>Deploy AIDE.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual configuration required."]]></Correction>
        <Verification><![CDATA[passwd -S root | awk '{exit ($2 ~ /^(P|L)$/) ? 0 : 1}' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.4.2.5">
        <Name>Ensure root user umask is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/profile</BasePath>
        <FileName>profile</FileName>
        <NonCompliantComment>Root umask insecure.</NonCompliantComment>
        <CorrectiveComment>Set umask 027.</CorrectiveComment>
        <Correction><![CDATA[echo "Manual configuration required."]]></Correction>
        <Verification><![CDATA[p=$(sudo -Hiu root env | grep '^PATH=' | cut -d= -f2); r=0; [[ "$p" =~ ::|:$|(^|:)\.(:|$) ]] && r=1; IFS=":" read -ra dirs <<< "$p"; for d in "${dirs[@]}"; do [ ! -d "$d" ] && r=1 && continue; read -r u a < <(stat -Lc '%U %a' "$d"); [ "$u" != "root" ] && r=1; [ "$a" -gt 755 ] && r=1; done; [ "$r" -eq 0 ] && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.4.2.6">
        <Name>Ensure root user umask is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/root</BasePath>
        <FileName>.bashrc</FileName>
        <NonCompliantComment>Root umask is not set or too permissive.</NonCompliantComment>
        <CorrectiveComment>Set umask to 027 in root's shell configuration files.</CorrectiveComment>
        <Correction><![CDATA[for f in /root/.bash_profile /root/.bashrc; do [ -f "$f" ] || touch "$f"; grep -q '^\s*umask' "$f" && sed -i 's|^\s*umask.*|umask 027|' "$f" || echo 'umask 027' >> "$f"; done]]></Correction>
        <Verification><![CDATA[grep -Pq '^\s*umask\s+0?0?2[0-7]\b' /root/.bash_profile /root/.bashrc && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.2.7">
        <Name>Ensure system accounts do not have a valid login shell (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/passwd</BasePath>
        <FileName>passwd</FileName>
        <NonCompliantComment>System accounts have interactive login shells.</NonCompliantComment>
        <CorrectiveComment>Assign nologin shell to all system accounts except exceptions.</CorrectiveComment>
        <Correction><![CDATA[awk -v min_uid="$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)" -F: '($3 < min_uid || $3 == 65534) && $1 !~ /^(root|halt|sync|shutdown|nfsnobody)$/ && $7 !~ /(nologin|false)$/' /etc/passwd | grep -q . && echo 1 || echo 0]]></Correction>
        <Verification><![CDATA[nologin_shell=$(command -v nologin); awk -v min_uid="$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)" -F: '($3 < min_uid || $3 == 65534) && $1 !~ /^(root|halt|sync|shutdown|nfsnobody)$/ && $7 !~ /(nologin|false)$/' /etc/passwd | cut -d: -f1 | xargs -r -n1 usermod -s "$nologin_shell"]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.2.8">
        <Name>Ensure accounts without a valid login shell are locked (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.2">Configure root and system accounts and environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/passwd</BasePath>
        <FileName>passwd</FileName>
        <NonCompliantComment>Non-root accounts without a valid shell are not locked.</NonCompliantComment>
        <CorrectiveComment>Lock all non-root accounts that do not have a valid login shell.</CorrectiveComment>
        <Correction><![CDATA[awk -F: -v pat="^($pattern)$" '($1 != "root" && $7 !~ pat) {print $1}' /etc/passwd | while read -r user; do   passwd -S "$user" | awk '$2 !~ /^L/ { system("usermod -L " user) }' user="$user"; done]]></Correction>
        <Verification><![CDATA[awk -F: -v pat="^($pattern)$" '($1 != "root" && $7 !~ pat) {print $1}' /etc/passwd | while read -r user; do   passwd -S "$user" | awk '$2 !~ /^L/ {exit 1}'; done && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.3.1">
        <Name>Ensure nologin is not listed in /etc/shells (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.3">Configure user default environment</SubSection>
        <Profiles>
            <Profile level="2" type="Server"/>
            <Profile level="2" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/shells</BasePath>
        <FileName>shells</FileName>
        <NonCompliantComment>nologin present in /etc/shells.</NonCompliantComment>
        <CorrectiveComment>Remove nologin.</CorrectiveComment>
        <Correction><![CDATA[echo -e 'TMOUT=900\nreadonly TMOUT\nexport TMOUT' > /etc/profile.d/99-tmout.sh]]></Correction>
        <Verification><![CDATA[for f in /etc/profile /etc/profile.d/*.sh /etc/bashrc; do   [ -f "$f" ] || continue;   grep -Pq '^\s*TMOUT=(900|[1-8][0-9]{2}|[1-9][0-9]|[1-9])\b' "$f"   && grep -Pq '^\s*readonly\s+TMOUT\b' "$f"   && grep -Pq '^\s*export\s+TMOUT\b' "$f" && echo 0 ; done || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.3.2">
        <Name>Ensure default user shell timeout is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.3">Configure user default environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/profile</BasePath>
        <FileName>profile</FileName>
        <NonCompliantComment>No TMOUT configured.</NonCompliantComment>
        <CorrectiveComment>Set TMOUT=600.</CorrectiveComment>
        <Correction><![CDATA[echo -e '[ "$PS1" ] || return\nTMOUT=900\nreadonly TMOUT\nexport TMOUT' > /etc/profile.d/99-tmout.sh]]></Correction>
        <Verification><![CDATA[ok=0 bad=0; for f in /etc/profile /etc/bashrc /etc/profile.d/*.sh; do [ -f "$f" ] || continue; grep -Pq '^\s*TMOUT=(900|[1-8][0-9]{2}|[1-9][0-9]|[1-9])\b' "$f" && grep -Pq '^\s*readonly\s+TMOUT\b' "$f" && grep -Pq '^\s*export\s+TMOUT\b' "$f" && ok=1; grep -Pq '^\s*TMOUT=(0|9[1-9]\d|[1-9]\d{3,})\b' "$f" && bad=1; done; [ "$ok" -eq 1 ] && [ "$bad" -eq 0 ] && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>

    <Rule id="5.4.3.3">
        <Name>Ensure default user umask is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.4">User Accounts and Environment</Section>
        <SubSection id="5.4.3">Configure user default environment</SubSection>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/profile</BasePath>
        <FileName>profile</FileName>
        <NonCompliantComment>Default umask insecure.</NonCompliantComment>
        <CorrectiveComment>Set umask 027.</CorrectiveComment>
        <Correction><![CDATA[echo -e '#!/bin/sh\numask 027' > /etc/profile.d/50-system_umask.sh && chmod 644 /etc/profile.d/50-system_umask.sh]]></Correction>
        <Verification><![CDATA[ok=0 bad=0; for f in /etc/profile /etc/bashrc /etc/profile.d/*.sh; do [ -f "$f" ] || continue; grep -Pq '^\s*umask\s+0?0?(027|077)\b' "$f" && ok=1; grep -Pq '^\s*umask\s+0?0?(00[0-7]|0?0?0?0?2[0-6]|0?0?0?0?022)\b' "$f" && bad=1; done; [ "$ok" -eq 1 ] && [ "$bad" -eq 0 ] && echo 0 || echo 1]]></Verification>
        <Manual>NO</Manual>
    </Rule>
</RulesCIS>