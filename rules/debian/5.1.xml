<RulesCIS>
    <Rule id="5.1.1">
        <Name>Ensure permissions on /etc/ssh/sshd_config are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>sshd_config file permissions are not set to 600, risking unauthorized modifications.</NonCompliantComment>
        <CorrectiveComment>Set permissions on /etc/ssh/sshd_config to 600.</CorrectiveComment>
        <Correction><![CDATA[chmod 600 /etc/ssh/sshd_config 2>/dev/null; chown root:root /etc/ssh/sshd_config 2>/dev/null; find /etc/ssh/sshd_config.d -type f -name '*.conf' -exec chmod 600 {} \; -exec chown root:root {} \; 2>/dev/null]]></Correction>
        <Verification><![CDATA[find /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf -type f 2>/dev/null | while read -r f; do stat -Lc '%a %U %G' "$f"; done | awk '($1 > 600 || $2 != "root" || $3 != "root"){e=1} END{if(e) print 1; else print 0}']]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.2">
        <Name>Ensure permissions on SSH private host key files are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>ssh_host_*_key</FileName>
        <NonCompliantComment>SSH private host key file permissions are too permissive.</NonCompliantComment>
        <CorrectiveComment>Set permissions on SSH private host key files to 600.</CorrectiveComment>
        <Correction><![CDATA[find /etc/ssh -xdev -type f ! -name '*.pub' -exec chown root:root {} \; -exec chmod go-rwx {} \; 2>/dev/null]]></Correction>
        <Verification><![CDATA[find /etc/ssh -xdev -type f ! -name '*.pub' 2>/dev/null | while read -r f; do stat -Lc '%a %U %G' "$f"; done | awk '($1 > 640 || ($2 != "root") || ($3 != "root" && $3 !~ /^(ssh_keys|_?ssh)$/)){e=1} END{if(e) print 1; else print 0}']]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.3">
        <Name>Ensure permissions on SSH public host key files are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>ssh_host_*_key.pub</FileName>
        <NonCompliantComment>SSH public host key file permissions are too open.</NonCompliantComment>
        <CorrectiveComment>Set permissions on SSH public host key files to 644.</CorrectiveComment>
        <Correction><![CDATA[find /etc/ssh -xdev -type f -name '*.pub' -exec chown root:root {} \; -exec chmod go-wx {} \; 2>/dev/null]]></Correction>
        <Verification><![CDATA[find /etc/ssh -xdev -type f -name '*.pub' 2>/dev/null | while read -r f; do s=$(stat -Lc '%a %U %G' "$f"); p=$(cut -d' ' -f1 <<< "$s"); u=$(cut -d' ' -f2 <<< "$s"); g=$(cut -d' ' -f3 <<< "$s"); [[ $p -le 644 && $u == root && $g == root ]] || { echo 1; exit; }; done; echo 0]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.4">
        <Name>Ensure sshd access is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>sshd access is not restricted; insecure defaults may allow unauthorized access.</NonCompliantComment>
        <CorrectiveComment>Restrict sshd access by disabling root login and limiting allowed users.</CorrectiveComment>
        <Correction><![CDATA[echo "AllowUsers admin" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Piq '^\s*(allow|deny)(users|groups)\s+\S+' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.5">
        <Name>Ensure sshd Banner is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>SSH banner is not configured, reducing user awareness of login policies.</NonCompliantComment>
        <CorrectiveComment>Configure a banner in sshd_config to display a warning message.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^Banner/d' /etc/ssh/sshd_config && echo 'Banner /etc/issue.net' >> /etc/ssh/sshd_config && printf '%s\n' 'Authorized users only. All activity may be monitored and reported.' > /etc/issue.net]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pq '^banner\s+/\S+' && f="$(sshd -T | awk '$1=="banner"{print $2}')" && [ -e "$f" ] && ! grep -PsiqE '(\\v|\\r|\\m|\\s|\b'$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"')'\b)' "$f" && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.6">
        <Name>Ensure sshd Ciphers are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Insecure SSH ciphers may be allowed by default.</NonCompliantComment>
        <CorrectiveComment>Configure secure ciphers in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[echo 'Ciphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,chacha20-poly1305@openssh.com' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi -- '^ciphers\s+.*(3des|blowfish|cast128|aes(128|192|256)-cbc|arcfour|rijndael-cbc@lysator\.liu\.se)' > /dev/null && echo 1 || echo 0]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.7">
        <Name>Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>ClientAliveInterval and ClientAliveCountMax are not configured, potentially allowing indefinite idle sessions.</NonCompliantComment>
        <CorrectiveComment>Set ClientAliveInterval to 300 and ClientAliveCountMax to 0 to limit idle time.</CorrectiveComment>
        <Correction><![CDATA[echo -e "\nClientAliveInterval 15\nClientAliveCountMax 3" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi '^(clientaliveinterval|clientalivecountmax)\s+[1-9]' | grep -q clientaliveinterval && sshd -T | grep -Pi '^(clientaliveinterval|clientalivecountmax)\s+[1-9]' | grep -q clientalivecountmax && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.8">
        <Name>Ensure sshd DisableForwarding is enabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="2" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>SSH forwarding is enabled, potentially allowing unauthorized tunneling.</NonCompliantComment>
        <CorrectiveComment>Disable TCP forwarding by setting AllowTcpForwarding to no.</CorrectiveComment>
        <Correction><![CDATA[echo "DisableForwarding yes" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -i '^disableforwarding yes$' >/dev/null && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.9">
        <Name>Ensure sshd GSSAPIAuthentication is disabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="2" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>GSSAPIAuthentication is enabled, which can expose the system to certain attacks.</NonCompliantComment>
        <CorrectiveComment>Disable GSSAPIAuthentication in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[echo -e "\nGSSAPIAuthentication no" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^gssapiauthentication no$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.10">
        <Name>Ensure sshd HostbasedAuthentication is disabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>HostbasedAuthentication is enabled, which may allow bypassing password authentication.</NonCompliantComment>
        <CorrectiveComment>Disable HostbasedAuthentication in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[echo -e "\nHostbasedAuthentication no" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^hostbasedauthentication no$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.11">
        <Name>Ensure sshd IgnoreRhosts is enabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Rhosts-based authentication is not ignored, which is insecure.</NonCompliantComment>
        <CorrectiveComment>Enable IgnoreRhosts in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[echo -e "\nIgnoreRhosts yes" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^ignorerhosts yes$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.12">
        <Name>Ensure sshd KexAlgorithms is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Weak key-exchange algorithms may be permitted by default.</NonCompliantComment>
        <CorrectiveComment>Configure strong KexAlgorithms in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[echo -e "\nKexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1" >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pqi 'kexalgorithms\s+([^#\n\r]+,)?(diffie-hellman-group1-sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\b' && echo 1 || echo 0]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.13">
        <Name>Ensure sshd LoginGraceTime is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>LoginGraceTime is not set, allowing excessive time for authentication attempts.</NonCompliantComment>
        <CorrectiveComment>Set LoginGraceTime to 60 seconds in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*LoginGraceTime\s\+/d' /etc/ssh/sshd_config && echo 'LoginGraceTime 60' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi '^logingracetime\s+([1-9]|[1-5][0-9]|60)$' > /dev/null && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.14">
        <Name>Ensure sshd LogLevel is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>LogLevel is not explicitly set, reducing the ability to audit SSH sessions.</NonCompliantComment>
        <CorrectiveComment>Set LogLevel to VERBOSE in sshd_config to enhance logging.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*LogLevel\s\+/d' /etc/ssh/sshd_config && echo 'LogLevel VERBOSE' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi '^loglevel\s+(info|verbose)$' > /dev/null && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.15">
        <Name>Ensure sshd MACs are configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Weak MAC algorithms may be allowed by default, reducing message integrity.</NonCompliantComment>
        <CorrectiveComment>Configure strong MAC algorithms in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*MACs\s\+/d' /etc/ssh/sshd_config && echo 'MACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi -- 'macs\s+([^#\n\r]+,)?(hmac-md5|hmac-md5-96|hmac-ripemd160|hmac-sha1-96|umac-64@openssh\.com|hmac-md5-etm@openssh\.com|hmac-md5-96-etm@openssh\.com|hmac-ripemd160-etm@openssh\.com|hmac-sha1-96-etm@openssh\.com|umac-64-etm@openssh\.com|umac-128-etm@openssh\.com)\b' > /dev/null && echo 1 || echo 0]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.16">
        <Name>Ensure sshd MaxAuthTries is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>MaxAuthTries is not limited, increasing the risk of brute-force attacks.</NonCompliantComment>
        <CorrectiveComment>Set MaxAuthTries to 4 in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*MaxAuthTries\s\+/d' /etc/ssh/sshd_config && echo 'MaxAuthTries 4' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -Pi '^maxauthtries\s+[1-4]$' > /dev/null && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.17">
        <Name>Ensure sshd MaxSessions is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>MaxSessions is not limited, potentially allowing excessive concurrent SSH sessions.</NonCompliantComment>
        <CorrectiveComment>Set MaxSessions to 10 in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*MaxSessions\s\+/d' /etc/ssh/sshd_config && echo 'MaxSessions 10' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -i maxsessions | grep -qP 'maxsessions\s+([1-9]|10)$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.18">
        <Name>Ensure sshd MaxStartups is configured (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>MaxStartups is not configured, which may allow excessive connection attempts.</NonCompliantComment>
        <CorrectiveComment>Set MaxStartups to 10:30:60 in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*MaxStartups\s\+/d' /etc/ssh/sshd_config && echo 'MaxStartups 10:30:60' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | awk '$1 ~ /^\s*maxstartups/ { split($2,a,":"); if (a[1]<=10 && a[2]<=30 && a[3]<=60) exit 0; else exit 1 }'; echo $?]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.19">
        <Name>Ensure sshd PermitEmptyPasswords is disabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Empty passwords are permitted, which is a severe security risk.</NonCompliantComment>
        <CorrectiveComment>Disable the use of empty passwords in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*PermitEmptyPasswords\s\+/d' /etc/ssh/sshd_config && echo 'PermitEmptyPasswords no' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^permitemptypasswords no$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.20">
        <Name>Ensure sshd PermitRootLogin is disabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>Root login is permitted via SSH, increasing the risk of unauthorized privileged access.</NonCompliantComment>
        <CorrectiveComment>Disable root login via SSH by setting PermitRootLogin to no.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*PermitRootLogin\s\+/d' /etc/ssh/sshd_config && echo 'PermitRootLogin no' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^permitrootlogin no$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.21">
        <Name>Ensure sshd PermitUserEnvironment is disabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>User environment options are permitted, which may allow users to bypass security restrictions.</NonCompliantComment>
        <CorrectiveComment>Disable PermitUserEnvironment in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*PermitUserEnvironment\s\+/d' /etc/ssh/sshd_config && echo 'PermitUserEnvironment no' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^permituserenvironment no$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>

    <Rule id="5.1.22">
        <Name>Ensure sshd UsePAM is enabled (Automated)</Name>
        <Chapter id="5">Access Control</Chapter>
        <Section id="5.1">Configure SSH Server</Section>
        <Profiles>
            <Profile level="1" type="Server"/>
            <Profile level="1" type="Workstation"/>
        </Profiles>
        <BasePath>/etc/ssh/</BasePath>
        <FileName>sshd_config</FileName>
        <NonCompliantComment>PAM is not enabled for SSH, limiting centralized authentication enforcement.</NonCompliantComment>
        <CorrectiveComment>Enable PAM by setting UsePAM to yes in sshd_config.</CorrectiveComment>
        <Correction><![CDATA[sed -i '/^\s*UsePAM\s\+/d' /etc/ssh/sshd_config && echo 'UsePAM yes' >> /etc/ssh/sshd_config && systemctl reload sshd]]></Correction>
        <Verification><![CDATA[sshd -T | grep -qi '^usepam yes$' && echo 0 || echo 1]]></Verification>
        <Manual>CORRECTION</Manual>
    </Rule>
</RulesCIS>